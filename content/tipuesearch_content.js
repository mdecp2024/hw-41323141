var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲:  https://github.com/mdecp2024/hw-41323141 \xa0 \n 個人網站: \xa0 https://github.com/mdecp2024/hw-41323141 \xa0 \xa0 \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n', 'tags': '', 'url': 'w7.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.Brython \n 從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n  啟動 Brython  \n window.onload=function(){ brython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']}); } \n  導入 FileSaver 與 filereader  \n \n  導入 ace  \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n function doSave(storage_id, filename){ var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"}); filename = document.getElementById(filename).value saveAs(blob, filename+".py"); } \n from browser import document as doc import ace # 清除畫布 def clear_bd1(ev): bd = doc["brython_div1"] bd.clear() Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" ) # 從 gist 取出程式碼後, 放入 editor 作為 default 程式 def run1(): # 利用 get 取下 src 變數值 try: url = doc.query["src"] except: url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py" prog = open(url).read() # 將程式載入編輯區 Ace1.editor.setValue(prog) Ace1.editor.scrollToRow(0) Ace1.editor.gotoLine(0) # 直接執行程式 #ns = {\'__name__\':\'__main__\'} #exec(prog, ns) # 按下 run 按鈕 Ace1.run() # 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定 doc[\'kw_run1\'].bind(\'click\', Ace1.run) doc[\'kw_show_console1\'].bind(\'click\', Ace1.show_console) doc[\'kw_clear_console1\'].bind(\'click\', Ace1.clear_console) doc[\'clear_bd1\'].bind(\'click\', clear_bd1) # 呼叫函式執行 run1() \n  add 1 to 100 開始   from browser import document as doc import ace # 清除畫布 def clear_bd1(ev): bd = doc["brython_div1"] bd.clear() # 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件 Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" ) add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py" # 從 gist 取得程式碼 add_src = open(add1to100_url).read() def add(ev): Ace2.editor.setValue(add_src) Ace2.editor.scrollToRow(0) Ace2.editor.gotoLine(0) Ace2.run() # id 為 "add1to100" 的按鈕點按時, 執行 add 方法 doc["add1to100"].bind(\'click\', add) \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束  \n \n  ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n from browser import document as doc import ace # 清除畫布 def clear_bd2(ev): bd = doc["brython_div2"] bd.clear() Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" ) # 從 gist 取出程式碼後, 放入 editor 作為 default 程式 def run2(): # 利用 get 取下 src 變數值 try: url = doc.query["src2"] except: url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py" prog = open(url).read() # 將程式載入編輯區 Ace3.editor.setValue(prog) Ace3.editor.scrollToRow(0) Ace3.editor.gotoLine(0) # 直接執行程式 #ns = {\'__name__\':\'__main__\'} #exec(prog, ns) # 按下 run 按鈕 Ace3.run() # 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定 doc[\'kw_run2\'].bind(\'click\', Ace3.run) doc[\'kw_show_console2\'].bind(\'click\', Ace3.show_console) doc[\'kw_clear_console2\'].bind(\'click\', Ace3.clear_console) doc[\'clear_bd2\'].bind(\'click\', clear_bd2) # 呼叫函式執行 run2() \n  add 1 to 100 part2 開始   from browser import document as doc import ace # 清除畫布 def clear_bd2(ev): bd = doc["brython_div2"] bd.clear() # 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件 Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" ) # 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區 class button2: def __init__(self, url): self.url = url # 記得加入 event 輸入變數 def do(self,ev): Ace4.editor.setValue(open(self.url).read()) Ace4.editor.scrollToRow(0) Ace4.editor.gotoLine(0) Ace4.run() add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py" # 從 gist 取得程式碼 add_src = open(add1to100_url).read() def add2(ev): Ace4.editor.setValue(add_src) Ace4.editor.scrollToRow(0) Ace4.editor.gotoLine(0) Ace4.run() # id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法 doc["add1to100part2"].bind(\'click\', add2) # 以下為運用 button2 class 的通用 gist 程式導入區 ################################## cango_three_gears start cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py" cango_three_gears = button2(cango_three_gears_url) doc["cango_three_gears"].bind("click", cango_three_gears.do) ################################## cango_three_gears end ################################## bsnake start bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py" bsnake = button2(bsnake_url) doc["bsnake"].bind("click", bsnake.do) ################################## bsnake end ################################## aitetris start aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py" aitetris = button2(aitetris_url) doc["aitetris"].bind("click", aitetris.do) ################################## aitetris end ################################## threejsblock start threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py" threejsblock = button2(threejsblock_url) doc["threejsblock"].bind("click", threejsblock.do) ################################## threejsblock end \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n  啟動 Brython  \n window.onload=function(){ brython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']}); } \n  導入 FileSaver 與 filereader  \n \n  導入 ace  \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n function doSave(storage_id, filename){ var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"}); filename = document.getElementById(filename).value saveAs(blob, filename+".py"); } \n from browser import document as doc import ace # 清除畫布 def clear_bd1(ev): bd = doc["brython_div1"] bd.clear() Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" ) # 從 gist 取出程式碼後, 放入 editor 作為 default 程式 def run1(): # 利用 get 取下 src 變數值 try: url = doc.query["src"] except: url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py" prog = open(url).read() # 將程式載入編輯區 Ace1.editor.setValue(prog) Ace1.editor.scrollToRow(0) Ace1.editor.gotoLine(0) # 直接執行程式 #ns = {\'__name__\':\'__main__\'} #exec(prog, ns) # 按下 run 按鈕 Ace1.run() # 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定 doc[\'kw_run1\'].bind(\'click\', Ace1.run) doc[\'kw_show_console1\'].bind(\'click\', Ace1.show_console) doc[\'kw_clear_console1\'].bind(\'click\', Ace1.clear_console) doc[\'clear_bd1\'].bind(\'click\', clear_bd1) # 呼叫函式執行 run1() \n  add 1 to 100 開始   from browser import document as doc import ace # 清除畫布 def clear_bd1(ev): bd = doc["brython_div1"] bd.clear() # 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件 Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" ) add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py" # 從 gist 取得程式碼 add_src = open(add1to100_url).read() def add(ev): Ace2.editor.setValue(add_src) Ace2.editor.scrollToRow(0) Ace2.editor.gotoLine(0) Ace2.run() # id 為 "add1to100" 的按鈕點按時, 執行 add 方法 doc["add1to100"].bind(\'click\', add) \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n from browser import document as doc import ace # 清除畫布 def clear_bd2(ev): bd = doc["brython_div2"] bd.clear() Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" ) # 從 gist 取出程式碼後, 放入 editor 作為 default 程式 def run2(): # 利用 get 取下 src 變數值 try: url = doc.query["src2"] except: url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py" prog = open(url).read() # 將程式載入編輯區 Ace3.editor.setValue(prog) Ace3.editor.scrollToRow(0) Ace3.editor.gotoLine(0) # 直接執行程式 #ns = {\'__name__\':\'__main__\'} #exec(prog, ns) # 按下 run 按鈕 Ace3.run() # 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定 doc[\'kw_run2\'].bind(\'click\', Ace3.run) doc[\'kw_show_console2\'].bind(\'click\', Ace3.show_console) doc[\'kw_clear_console2\'].bind(\'click\', Ace3.clear_console) doc[\'clear_bd2\'].bind(\'click\', clear_bd2) # 呼叫函式執行 run2() \n  add 1 to 100 part2 開始   from browser import document as doc import ace # 清除畫布 def clear_bd2(ev): bd = doc["brython_div2"] bd.clear() # 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件 Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" ) # 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區 class button2: def __init__(self, url): self.url = url # 記得加入 event 輸入變數 def do(self,ev): Ace4.editor.setValue(open(self.url).read()) Ace4.editor.scrollToRow(0) Ace4.editor.gotoLine(0) Ace4.run() add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py" # 從 gist 取得程式碼 add_src = open(add1to100_url).read() def add2(ev): Ace4.editor.setValue(add_src) Ace4.editor.scrollToRow(0) Ace4.editor.gotoLine(0) Ace4.run() # id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法 doc["add1to100part2"].bind(\'click\', add2) # 以下為運用 button2 class 的通用 gist 程式導入區 ################################## cango_three_gears start cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py" cango_three_gears = button2(cango_three_gears_url) doc["cango_three_gears"].bind("click", cango_three_gears.do) ################################## cango_three_gears end ################################## bsnake start bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py" bsnake = button2(bsnake_url) doc["bsnake"].bind("click", bsnake.do) ################################## bsnake end ################################## aitetris start aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py" aitetris = button2(aitetris_url) doc["aitetris"].bind("click", aitetris.do) ################################## aitetris end ################################## threejsblock start threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py" threejsblock = button2(threejsblock_url) doc["threejsblock"].bind("click", threejsblock.do) ################################## threejsblock end \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n', 'tags': '', 'url': 'Brython.html'}]};