<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲: <a href="https://github.com/mdecp2024/hw-41323141">https://github.com/mdecp2024/hw-41323141</a> </p>
<p>個人網站:<span> </span><a href="https://github.com/mdecp2024/hw-41323141">https://github.com/mdecp2024/hw-41323141</a><span> </span><span> </span></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯</p><h3>w7</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Q7BZzGQgw0M?si=zHUm7PbQCe1-8Yiz" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p>第一題</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/YG9uOgbLKeU" width="560"></iframe></p>
<p></p>
<div id="tipue_search_content">
<p>第二題</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/wdQlHC937jA" width="560"></iframe></p>
<p>第三題</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/fgcGdhZ5-To" width="560"></iframe></p>
<p>以下方程式列印採用 <a href="https://www.mathjax.org/#gettingstarted">Mathjax Version 3 格式</a>.</p>
<script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
<h4>set1 - Physics</h4>
<p><span style="background-color: #ccffcc;">Use python to solve the problem: A jet touches down at velocity 310 km/h. Find the constant acceleration required to stop the aircraft 1000 m down the runway.</span></p>
<p style="padding-left: 30px;">To solve this problem, we'll use the kinematic equations of motion under constant acceleration. The question asks for the constant acceleration required to stop the jet after a certain distance, which means we are looking for the deceleration.</p>
<p style="padding-left: 30px;">Step 1: Problem Breakdown</p>
<p style="padding-left: 30px;">We are given:<br/>- Initial velocity \( v_0 = 310 \, \text{km/h} \)<br/>- Final velocity \( v = 0 \, \text{m/s} \) (since the jet stops)<br/>- Distance \( d = 1000 \, \text{m} \)</p>
<p style="padding-left: 30px;">We are asked to find the constant acceleration \( a \) that brings the jet to a stop.</p>
<p style="padding-left: 30px;">Step 2: Kinematic Equation</p>
<p style="padding-left: 30px;">The appropriate kinematic equation for this problem, where the object is decelerating (i.e., stopping), is:</p>
<p style="padding-left: 30px;">\[<br/>v^2 = v_0^2 + 2ad<br/>\]</p>
<p style="padding-left: 30px;">Where:<br/>- \( v \) is the final velocity (which is 0 since the jet stops),<br/>- \( v_0 \) is the initial velocity,<br/>- \( a \) is the constant acceleration (which we need to solve for),<br/>- \( d \) is the distance traveled.</p>
<p style="padding-left: 30px;">Step 3: Solving for Acceleration \( a \)</p>
<p style="padding-left: 30px;">Rearranging the equation to solve for \( a \):</p>
<p style="padding-left: 30px;">\[<br/>a = \frac{v^2 - v_0^2}{2d}<br/>\]</p>
<p style="padding-left: 30px;">Since \( v = 0 \), this simplifies to:</p>
<p style="padding-left: 30px;">\[<br/>a = \frac{-v_0^2}{2d}<br/>\]</p>
<p style="padding-left: 30px;">Step 4: Converting Units</p>
<p style="padding-left: 30px;">The velocity \( v_0 = 310 \, \text{km/h} \) needs to be converted to meters per second (m/s) because the distance is in meters and we want the acceleration in meters per second squared (m/s²).</p>
<p style="padding-left: 30px;">\[<br/>v_0 = 310 \, \text{km/h} = \frac{310 \times 1000}{3600} \, \text{m/s} = 86.11 \, \text{m/s}<br/>\]</p>
<p style="padding-left: 30px;">Step 5: Substituting Known Values</p>
<p style="padding-left: 30px;">Now we can substitute the values into the equation:</p>
<p style="padding-left: 30px;">\[<br/>a = \frac{-(86.11)^2}{2 \times 1000}<br/>\]</p>
<p style="padding-left: 30px;">Let's calculate this using Python.</p>
<p style="padding-left: 30px;">Python Code Implementation: <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/d9558707c7e1765c1e6885ddc6919e32265c6d23/problem-set1-1_py.txt">problem-set1-1.py</a></p>
<p style="padding-left: 30px;"></p>
<p style="padding-left: 30px;">Use function to solve this kind of problem. <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9567804babcc2fa9edc32403d76dcf2af4955bcf/problem-set1-2_py.txt">problem-set1-2.py</a></p>
<p style="padding-left: 30px;">Extend to be more general to solve all kind of these problems. <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/9567804babcc2fa9edc32403d76dcf2af4955bcf/problem-set1-3_py.txt">problem-set1-3.py</a></p>
<h4>set2- Calculus</h4>
<p><span style="background-color: #ccffcc;">Under ideal conditions a certain bacteria population is known to double every three hours. Suppose that there are initially 100 bacteria. When will the population first reach 50,000 ?</span></p>
<p style="padding-left: 30px;">We are asked to determine when a bacteria population, starting at 100 bacteria, will first reach 50,000, given that the population doubles every 3 hours.</p>
<p style="padding-left: 30px;">Exponential Growth Equation:</p>
<p style="padding-left: 30px;">The population growth can be modeled by the exponential growth formula:</p>
<p style="padding-left: 30px;">\[<br/>P(t) = P_0 \times 2^{\frac{t}{T}}<br/>\]</p>
<p style="padding-left: 30px;">Where:<br/>- \( P(t) \) is the population at time \( t \),<br/>- \( P_0 \) is the initial population,<br/>- \( T \) is the doubling time (in hours),<br/>- \( t \) is the time elapsed (in hours).</p>
<p style="padding-left: 30px;">Given:<br/>- \( P_0 = 100 \) (initial population),<br/>- \( T = 3 \) hours (doubling time),<br/>- \( P(t) = 50,000 \) (target population).</p>
<p style="padding-left: 30px;">Step 1: Plugging in the known values</p>
<p style="padding-left: 30px;">We want to find the time \( t \) when the population reaches 50,000. Substituting the known values into the growth equation:</p>
<p style="padding-left: 30px;">\[<br/>50,000 = 100 \times 2^{\frac{t}{3}}<br/>\]</p>
<p style="padding-left: 30px;">Step 2: Simplifying the equation</p>
<p style="padding-left: 30px;">First, divide both sides by 100 to isolate the exponential term:</p>
<p style="padding-left: 30px;">\[<br/>500 = 2^{\frac{t}{3}}<br/>\]</p>
<p style="padding-left: 30px;">Step 3: Solving for \( t \)</p>
<p style="padding-left: 30px;">To solve for \( t \), take the logarithm (base 2) of both sides of the equation:</p>
<p style="padding-left: 30px;">\[<br/>\log_2(500) = \frac{t}{3}<br/>\]</p>
<p style="padding-left: 30px;">Now, multiply both sides by 3 to solve for \( t \):</p>
<p style="padding-left: 30px;">\[<br/>t = 3 \times \log_2(500)<br/>\]</p>
<p style="padding-left: 30px;">Step 4: Change of Base Formula</p>
<p style="padding-left: 30px;">To compute \( \log_2(500) \) in Python or any other programming language, we can use the change of base formula:</p>
<p style="padding-left: 30px;">\[<br/>\log_2(x) = \frac{\log_{10}(x)}{\log_{10}(2)}<br/>\]</p>
<p style="padding-left: 30px;">Thus, the equation for \( t \) becomes:</p>
<p style="padding-left: 30px;">\[<br/>t = 3 \times \frac{\log_{10}(500)}{\log_{10}(2)}<br/>\]</p>
<p style="padding-left: 30px;">Python Code to Calculate \( t \): <a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/d9558707c7e1765c1e6885ddc6919e32265c6d23/problem-set2-1_py.txt">problem-set2-1.py</a></p>
<p></p>
</div>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p><a href="https://solid-sniffle-97j7qxvp555gf7774-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323141/0c6e1b2994a24e853c8cc3cf3de23f4a/raw/5d088afbd1d2394ef5e998fe15ce80958b09ab4d/gistfile1.txt">解</a></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域</p>
<p><a href="https://solid-sniffle-97j7qxvp555gf7774-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323141/956b26c34d6070343b526c568573e57a/raw/440771f0d780c0ccfefecfe1e7fdd9fbaada965e/gistfile1.txt">解</a></p>
<p><img alt="" height="229" src="/images/螢幕擷取畫面 2024-11-28 151130.png" width="227"/></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/NZxxpswzeCg" width="560"></iframe><br/><br/></p>
<p><br/><br/></p>
<p></p>
<p></p><h3>w12_hw</h3>
<p>1.<a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/0d972aa7070672b1037b1a6aa0904deb/raw/157f9ef78d53c48543dde2431f35a7ef06eaee05/gistfile1.txt">第一題</a>   <a href="https://gist.githubusercontent.com/41323141/0d972aa7070672b1037b1a6aa0904deb/raw/157f9ef78d53c48543dde2431f35a7ef06eaee05/gistfile1.txt">程式</a></p>
<p></p>
<p>2.<a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/d26c189af002f5659f35e39a92df52ef/raw/1a883dd5fa0dba89c86b30ea7ab5b30c711024f7/gistfile1.txt">第二題</a>   <a href="https://gist.githubusercontent.com/41323141/d26c189af002f5659f35e39a92df52ef/raw/1a883dd5fa0dba89c86b30ea7ab5b30c711024f7/gistfile1.txt">程式</a></p>
<p></p>
<p>3.<a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/a79dcd84583e73bf270bcf95c60e8db2/raw/192a1704cf61c97ee4ce5f0806222a29264031b1/gistfile1.txt">第三題</a>   <a href="https://gist.githubusercontent.com/41323141/a79dcd84583e73bf270bcf95c60e8db2/raw/192a1704cf61c97ee4ce5f0806222a29264031b1/gistfile1.txt">程式</a></p>
<p></p>
<p>4.<a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/f50b11ae973e9bf08e3e9f4d09d12105/raw/2540e96ddbd99cb4e500b10ef858cfd20b74b0a9/gistfile1.txt">第四題</a>   <a href="https://gist.githubusercontent.com/41323141/f50b11ae973e9bf08e3e9f4d09d12105/raw/2540e96ddbd99cb4e500b10ef858cfd20b74b0a9/gistfile1.txt">程式</a></p>
<p></p>
<p>5.<a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/da0cb57945cd05c97e080e14f307de28/raw/0bc16df960dec3c73cd8c96dda48ecc504331412/gistfile1.txt">第五題</a>   <a href="https://gist.githubusercontent.com/41323141/da0cb57945cd05c97e080e14f307de28/raw/0bc16df960dec3c73cd8c96dda48ecc504331412/gistfile1.txt">程式</a></p>
<p></p>
<p>6.<a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/021b507502e36d0557ef4b822dd6e1b4/raw/268578ee22fc5ea55bda98d92ed8654013fe1900/gistfile1.txt">第六題</a>   <a href="https://gist.githubusercontent.com/41323141/021b507502e36d0557ef4b822dd6e1b4/raw/268578ee22fc5ea55bda98d92ed8654013fe1900/gistfile1.txt">程式</a></p>
<p></p>
<p>7.<a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/0115e0df170cbb44b1ba8b9c48533ba8/raw/d32a5471677f283d0f2e5096b8b192a3563c1aae/gistfile1.txt">第七題</a>   <a href="https://gist.githubusercontent.com/41323141/0115e0df170cbb44b1ba8b9c48533ba8/raw/d32a5471677f283d0f2e5096b8b192a3563c1aae/gistfile1.txt">程式</a></p>
<p></p>
<p>8.<a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/94926d885a4e6be94a09efa570618763/raw/f73c5483a95a526421d019db1c508120937a4622/gistfile1.txt">第八題</a>   <a href="https://gist.githubusercontent.com/41323141/94926d885a4e6be94a09efa570618763/raw/f73c5483a95a526421d019db1c508120937a4622/gistfile1.txt">程式</a></p>
<p></p>
<p>9.<a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/70e8df3eaa09cb563a2313c77c91633e/raw/f065ea321c0fd85a3c6db8f0e716147574a9853b/gistfile1.txt">第九</a><a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/70e8df3eaa09cb563a2313c77c91633e/raw/f065ea321c0fd85a3c6db8f0e716147574a9853b/gistfile1.txt">題</a>   <a href="https://gist.githubusercontent.com/41323141/70e8df3eaa09cb563a2313c77c91633e/raw/f065ea321c0fd85a3c6db8f0e716147574a9853b/gistfile1.txt">程式</a></p>
<p></p>
<p>10.<a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/36657f8741b09d941899e09844023f2d/raw/78338a5c98a8209d6736824623cf57c9a98605e0/gistfile1.txt">第十題</a>   <a href="https://gist.githubusercontent.com/41323141/36657f8741b09d941899e09844023f2d/raw/78338a5c98a8209d6736824623cf57c9a98605e0/gistfile1.txt">程式</a></p>
<p></p>
<p></p>
<p>hw    <a href="https://gist.githubusercontent.com/41323141/8393c2c63c88c74067d7a13820cf982f/raw/9db65266d5533b74f7b08aa192955f3b766b350d/gistfile1.txt">程式</a></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n=11 #總共行數
space = '_'
center = n//2

for y in range(n):
    for x in range(n):
        print("(",x,",",y,")",sep="")</pre>
<p><br/><br/><br/><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/7zOxsfKjFt4" width="560"></iframe></p>
<h3>w13_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/c7807b71823d89610f8c43acd6ca2997/raw/18d64e623bd30c784aeae43735b2e5db58a79a74/gistfile1.txt">程式</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc


canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1


ctx.strokeStyle = 'blue'  
ctx.beginPath() 
ctx.moveTo(-10, -10) 
ctx.lineTo(220, 220)  
ctx.stroke()</pre>
<p><img alt="" height="279" src="/images/螢幕擷取畫面 2024-12-05 145836.png" width="377"/></p>
<p></p>
<p><a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/3c04203edaf2640654bbad802d8c7ab8/raw/1a4d94d97e46090c4524a6d2a9697be309ddadfd/gistfile1.txt">第二題</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math
import random

canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 4

# 隨機顏色生成函數
def random_color():
    return f"rgb({random.randint(0, 255)}, {random.randint(0, 255)}, {random.randint(0, 255)})"

# 混色的
ctx.globalCompositeOperation = "screen"  # 設置顏色混合模式為 'screen'

# 黑邊圓*2 (每個畫四個扇形)
ctx.strokeStyle = 'black'

# 第一個圓
# 第一個扇形
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = random_color()  # 隨機顏色
ctx.fill()
ctx.stroke()

# 第二個扇形
ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = random_color()  # 隨機顏色
ctx.fill()
ctx.stroke()

# 第三個扇形
ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = random_color()  # 隨機顏色
ctx.fill()
ctx.stroke()

# 第四個扇形
ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = random_color()  # 隨機顏色
ctx.fill()
ctx.stroke()

# 第二個圓
# 第一個扇形
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = random_color()  # 隨機顏色
ctx.fill()
ctx.stroke()

# 第二個扇形
ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi, 2.25 * math.pi)
ctx.fillStyle = random_color()  # 隨機顏色
ctx.fill()
ctx.stroke()

# 第三個扇形
ctx.beginPath()
ctx.arc(260, 260, 141, 2.25 * math.pi, 2.75 * math.pi)
ctx.fillStyle = random_color()  # 隨機顏色
ctx.fill()
ctx.stroke()

# 第四個扇形
ctx.beginPath()
ctx.arc(260, 260, 141, 2.75 * math.pi, 3.25 * math.pi)
ctx.fillStyle = random_color()  # 隨機顏色
ctx.fill()
ctx.stroke()

# 畫正方形並填充顏色
ctx.strokeStyle = 'black'

# 畫正方形的對角線：左上角到右下角
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 260)
ctx.stroke()

# 填充第一個三角形 (左上到對角線)
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(160, 60)  # 左上角到對角線的右上方
ctx.lineTo(160, 160)  # 右上角到對角線的中點
ctx.closePath()
ctx.fillStyle = random_color()  # 隨機顏色
ctx.fill()

# 填充第二個三角形 (右下到對角線)
ctx.beginPath()
ctx.moveTo(160, 160)  # 中點
ctx.lineTo(260, 160)  # 右上角到對角線的中點
ctx.lineTo(260, 260)  # 右下角
ctx.closePath()
ctx.fillStyle = random_color()  # 隨機顏色
ctx.fill()
</pre>
<p><img alt="" height="316" src="/images/螢幕擷取畫面 2024-12-12 141442.png" width="366"/><br/><br/><br/></p>
<h3>W14_hw</h3>
<h3>w15</h3>
<p><a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/3ff4a5cf9d9e4327c95a4da873102d34/raw/f9c8fe85f41c39ddd5de914d907841fb7bff3551/gistfile1.txt">從 1 累加到 100</a></p>
<p></p>
<p><a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/3ff4a5cf9d9e4327c95a4da873102d34/raw/f9c8fe85f41c39ddd5de914d907841fb7bff3551/gistfile1.txt">addto</a></p>
<p><span></span></p>
<p><a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/1e3c827ae93117792c808d56c7372476/raw/58d70b637c17189729fa774ae77aa79d9085207b/gistfile1.txt"> add_only_even</a></p>
<p><span></span></p>
<p><a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/54f93eda6340a3a7f11e7045b033ded8/raw/c2065242e6e7e84b9fc7a5f82935c517a38e2c2b/gistfile1.txt">add_avoid_8</a></p>
<p></p>
<p>心得</p>
<p>一開始我太依賴gpt而自己只了解程式的大概而不是自己了解且自己做出來，但經過了這次的功課我學習到了不去依賴AI而是自己思考且可以自己做出來。了解完之後發現題目看起來很難其實就加了一些指令而已。完成這次的功課讓我更加有信心地完成接下來的功課。</p>
<p></p>
<p></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<h3>w16_exam1</h3>
<p></p>
<p><a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/fee8b580305e52dd606077a1bde57bae/raw/173755743f4bd780505916d989f07db043b34cc6/gistfile1.txt">link</a></p>
<p><a href="https://gist.githubusercontent.com/41323141/fee8b580305e52dd606077a1bde57bae/raw/173755743f4bd780505916d989f07db043b34cc6/gistfile1.txt">程式碼</a></p>
<p><img alt="" height="268" src="/images/螢幕擷取畫面 2024-12-26 143937.png" width="553"/></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/11WrF2lc1R0" width="560"></iframe></p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p><span>題目一: 請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的藍色直線</span><span>, </span><span>自訂迷宮畫布大小</span><span>, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像).</span></p>
<p><a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/36ea7cd7a4fdc4821e5723f83b8d1fc0/raw/55d2704b12618aff480c23f26c7d780a77f10daf/gistfile1.txt">解</a></p>
<p><a href="https://gist.githubusercontent.com/41323141/36ea7cd7a4fdc4821e5723f83b8d1fc0/raw/55d2704b12618aff480c23f26c7d780a77f10daf/gistfile1.txt">程式碼</a></p>
<p><img alt="" height="306" src="/images/螢幕擷取畫面 2025-01-02 130453.png" width="321"/></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0XJgoNkyoWQ" width="560"></iframe></p>
<p></p><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<h3>w16_exam3</h3>
<p></p>
<p><span>請以</span><span>自己的學號最後四碼</span><span>作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 </span><span>pixel=2 的黑色直線</span><span>, </span><span>自訂迷宮畫布大小</span><span>, 直接在頁面畫出下列圖像, 並且</span><span>利用紅色連續線段標示從上方入口, 走至下方出口的路線圖</span><span>.</span></p>
<p><span></span></p>
<p><a href="https://mdecp2024.github.io/hw-41323141/content/Brython.html?src=https://gist.githubusercontent.com/41323141/01bfe3794f8cfc46da9ebe8cd62acc8e/raw/ad090c1ceb5840395723eb1f0e764ec3cfc570f4/gistfile1.txt">解</a></p>
<p><a href="https://gist.githubusercontent.com/41323141/01bfe3794f8cfc46da9ebe8cd62acc8e/raw/ad090c1ceb5840395723eb1f0e764ec3cfc570f4/gistfile1.txt">程式碼</a></p>
<p><img alt="" height="348" src="/images/螢幕擷取畫面 2025-01-02 131637.png" width="368"/></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/lNZ2BaRcfE8" width="560"></iframe></p>
<p></p>
<p></p>
<p><span></span></p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/1wfR7JZHzMk" width="560"></iframe></p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;"><iframe allow="autoplay" height="480" src="https://drive.google.com/file/d/16noZnbavk1Pm5pGVWLyqVgLRZgmlgJoU/preview" width="640"></iframe></p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">學習 Python 對學生來說是非常好的選擇，因為它的語法簡單易懂，適合入門。Python 應用廣泛，無論是數據分析、人工智慧，還是自動化，都有成熟的工具和框架，能幫助學生快速實踐所學。此外，Python 的學習資源豐富，學生可以輕鬆獲得支援並與全球開發者交流。最重要的是，學習 Python 能夠培養學生的邏輯思維和問題解決能力，對未來職業發展和科技探索有很大幫助</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p><h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>